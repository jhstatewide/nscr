{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["// Bootstrap is loaded via CDN in the HTML template\n\ninterface RegistryStats {\n  repositories: number;\n  totalBlobs: number;\n  totalManifests: number;\n  unreferencedBlobs: number;\n  estimatedSpaceToFree: number;\n  lastGcRun?: string;\n}\n\ninterface GarbageCollectionResult {\n  blobsRemoved: number;\n  spaceFreed: number;\n  manifestsRemoved: number;\n}\n\nclass RegistryWebInterface {\n  private container: HTMLElement;\n  private isAuthenticated = false;\n\n  constructor(containerId: string) {\n    this.container = document.getElementById(containerId)!;\n    this.initializeApp();\n  }\n\n  private async initializeApp() {\n    // Check if web auth is required\n    if (await this.checkWebAuthRequired()) {\n      this.showLoginForm();\n    } else {\n      this.showMainInterface();\n    }\n  }\n\n  private async checkWebAuthRequired(): Promise<boolean> {\n    try {\n      const response = await fetch('/api/web/status');\n      if (response.status === 401) {\n        return true; // Auth required\n      }\n      return false; // No auth required\n    } catch (error) {\n      return false; // Assume no auth on error\n    }\n  }\n\n  private showLoginForm() {\n    this.container.innerHTML = `\n      <div class=\"container mt-5\">\n        <div class=\"row justify-content-center\">\n          <div class=\"col-md-4\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <h4 class=\"mb-0\">Registry Login</h4>\n              </div>\n              <div class=\"card-body\">\n                <form id=\"login-form\">\n                  <div class=\"mb-3\">\n                    <label for=\"username\" class=\"form-label\">Username</label>\n                    <input type=\"text\" class=\"form-control\" id=\"username\" required>\n                  </div>\n                  <div class=\"mb-3\">\n                    <label for=\"password\" class=\"form-label\">Password</label>\n                    <input type=\"password\" class=\"form-control\" id=\"password\" required>\n                  </div>\n                  <button type=\"submit\" class=\"btn btn-primary w-100\">Login</button>\n                </form>\n                <div id=\"login-error\" class=\"alert alert-danger mt-3\" style=\"display: none;\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    document.getElementById('login-form')?.addEventListener('submit', (e) => {\n      e.preventDefault();\n      this.handleLogin();\n    });\n  }\n\n  private async handleLogin() {\n    const username = (document.getElementById('username') as HTMLInputElement).value;\n    const password = (document.getElementById('password') as HTMLInputElement).value;\n    const errorDiv = document.getElementById('login-error') as HTMLElement;\n\n    try {\n      const response = await fetch('/api/web/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        this.isAuthenticated = true;\n        this.showMainInterface();\n      } else {\n        const error = await response.json();\n        errorDiv.textContent = error.message || 'Login failed';\n        errorDiv.style.display = 'block';\n      }\n    } catch (error) {\n      errorDiv.textContent = 'Network error during login';\n      errorDiv.style.display = 'block';\n    }\n  }\n\n  private showMainInterface() {\n    this.container.innerHTML = `\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <div class=\"container\">\n          <a class=\"navbar-brand\" href=\"#\">NSCR Registry</a>\n          <div class=\"navbar-nav ms-auto\">\n            <span class=\"navbar-text me-3\">Registry Status</span>\n            ${this.isAuthenticated ? '<a class=\"nav-link\" href=\"#\" id=\"logout-btn\">Logout</a>' : ''}\n          </div>\n        </div>\n      </nav>\n      \n      <div class=\"container mt-4\">\n        <div id=\"dashboard-container\"></div>\n        <div id=\"repositories-container\" class=\"mt-4\"></div>\n      </div>\n    `;\n\n    this.loadDashboard();\n    this.loadRepositories();\n\n    // Setup logout if authenticated\n    if (this.isAuthenticated) {\n      document.getElementById('logout-btn')?.addEventListener('click', () => {\n        this.logout();\n      });\n    }\n  }\n\n  private async loadDashboard() {\n    const container = document.getElementById('dashboard-container');\n    if (!container) return;\n\n    try {\n      const response = await fetch('/api/web/status');\n      if (!response.ok) throw new Error('Failed to load status');\n      \n      const stats: RegistryStats = await response.json();\n      this.renderDashboard(stats);\n    } catch (error) {\n      container.innerHTML = `\n        <div class=\"alert alert-danger\">\n          <h5>Error Loading Dashboard</h5>\n          <p>Failed to load registry status: ${error}</p>\n        </div>\n      `;\n    }\n  }\n\n  private renderDashboard(stats: RegistryStats) {\n    const container = document.getElementById('dashboard-container');\n    if (!container) return;\n\n    container.innerHTML = `\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <h2>Registry Status</h2>\n        </div>\n      </div>\n      \n      <div class=\"row\">\n        <div class=\"col-md-3\">\n          <div class=\"card text-white bg-primary\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Repositories</h5>\n              <h2 class=\"card-text\">${stats.repositories}</h2>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-3\">\n          <div class=\"card text-white bg-success\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Total Blobs</h5>\n              <h2 class=\"card-text\">${stats.totalBlobs}</h2>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-3\">\n          <div class=\"card text-white bg-info\">\n          <div class=\"card-body\">\n              <h5 class=\"card-title\">Total Manifests</h5>\n              <h2 class=\"card-text\">${stats.totalManifests}</h2>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-3\">\n          <div class=\"card text-white bg-warning\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Unreferenced Blobs</h5>\n              <h2 class=\"card-text\">${stats.unreferencedBlobs}</h2>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"row mt-4\">\n        <div class=\"col-md-6\">\n          <div class=\"card\">\n            <div class=\"card-header\">\n              <h5 class=\"mb-0\">Storage Information</h5>\n            </div>\n            <div class=\"card-body\">\n              <p><strong>Estimated Space to Free:</strong> ${this.formatBytes(stats.estimatedSpaceToFree)}</p>\n              ${stats.lastGcRun ? `<p><strong>Last GC Run:</strong> ${new Date(stats.lastGcRun).toLocaleString()}</p>` : ''}\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"card\">\n            <div class=\"card-header d-flex justify-content-between align-items-center\">\n              <h5 class=\"mb-0\">Actions</h5>\n              <button id=\"gc-btn\" class=\"btn btn-warning btn-sm\">\n                <i class=\"bi bi-trash\"></i> Run Garbage Collection\n              </button>\n            </div>\n            <div class=\"card-body\">\n              <p class=\"text-muted\">Run garbage collection to clean up unreferenced blobs and free storage space.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Setup garbage collection button\n    document.getElementById('gc-btn')?.addEventListener('click', () => {\n      this.runGarbageCollection();\n    });\n  }\n\n  private async runGarbageCollection() {\n    const btn = document.getElementById('gc-btn') as HTMLButtonElement;\n    const originalText = btn.innerHTML;\n    \n    try {\n      btn.disabled = true;\n      btn.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span> Running...';\n      \n      const response = await fetch('/api/garbage-collect', {\n        method: 'POST',\n      });\n      \n      if (!response.ok) throw new Error('Garbage collection failed');\n      \n      const result: GarbageCollectionResult = await response.json();\n      \n      this.showAlert(`\n        <strong>Garbage Collection Completed!</strong><br>\n        Blobs removed: ${result.blobsRemoved}<br>\n        Manifests removed: ${result.manifestsRemoved}<br>\n        Space freed: ${this.formatBytes(result.spaceFreed)}\n      `, 'success');\n      \n      // Refresh dashboard\n      this.loadDashboard();\n      \n    } catch (error) {\n      this.showAlert(`Failed to run garbage collection: ${error}`, 'danger');\n    } finally {\n      btn.disabled = false;\n      btn.innerHTML = originalText;\n    }\n  }\n\n  private async loadRepositories() {\n    const container = document.getElementById('repositories-container');\n    if (!container) return;\n\n    try {\n      const response = await fetch('/v2/_catalog');\n      if (!response.ok) throw new Error('Failed to load repositories');\n      \n      const data = await response.json();\n      this.renderRepositories(data.repositories);\n    } catch (error) {\n      container.innerHTML = `\n        <div class=\"alert alert-warning\">\n          <h5>Repositories</h5>\n          <p>Failed to load repositories: ${error}</p>\n        </div>\n      `;\n    }\n  }\n\n  private async renderRepositories(repositories: string[]) {\n    const container = document.getElementById('repositories-container');\n    if (!container) return;\n\n    if (repositories.length === 0) {\n      container.innerHTML = `\n        <div class=\"card\">\n          <div class=\"card-header\">\n            <h5 class=\"mb-0\">Repositories</h5>\n          </div>\n          <div class=\"card-body\">\n            <p class=\"text-muted\">No repositories found in the registry.</p>\n          </div>\n        </div>\n      `;\n      return;\n    }\n\n    // Load tags for each repository\n    const repositoryData = await Promise.all(\n      repositories.map(async (repo) => {\n        try {\n          const response = await fetch(`/v2/${repo}/tags/list`);\n          if (response.ok) {\n            const data = await response.json();\n            return { name: repo, tags: data.tags || [] };\n          }\n        } catch (error) {\n          console.warn(`Failed to load tags for ${repo}:`, error);\n        }\n        return { name: repo, tags: [] };\n      })\n    );\n\n    container.innerHTML = `\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h5 class=\"mb-0\">Repositories (${repositories.length})</h5>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"row\">\n            ${repositoryData.map(repo => `\n              <div class=\"col-md-6 mb-3\">\n                <div class=\"card\">\n                  <div class=\"card-body\">\n                    <h6 class=\"card-title\">${repo.name}</h6>\n                    <p class=\"card-text\">\n                      <span class=\"badge bg-secondary\">${repo.tags.length} tags</span>\n                    </p>\n                    ${repo.tags.length > 0 ? `\n                      <div class=\"mt-2\">\n                        <small class=\"text-muted\">Latest tags:</small><br>\n                        ${repo.tags.slice(0, 3).map(tag => \n                          `<span class=\"badge bg-light text-dark me-1\">${tag}</span>`\n                        ).join('')}\n                        ${repo.tags.length > 3 ? `<span class=\"text-muted\">+${repo.tags.length - 3} more</span>` : ''}\n                      </div>\n                    ` : ''}\n                  </div>\n                </div>\n              </div>\n            `).join('')}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private formatBytes(bytes: number): string {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  private showAlert(message: string, type: string) {\n    const alertDiv = document.createElement('div');\n    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;\n    alertDiv.innerHTML = `\n      ${message}\n      <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    const container = document.getElementById('dashboard-container');\n    if (container) {\n      container.insertBefore(alertDiv, container.firstChild);\n      \n      // Auto-dismiss after 5 seconds\n      setTimeout(() => {\n        if (alertDiv.parentNode) {\n          alertDiv.remove();\n        }\n      }, 5000);\n    }\n  }\n\n  private logout() {\n    this.isAuthenticated = false;\n    this.initializeApp();\n  }\n}\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  new RegistryWebInterface('app');\n});\n"],
  "mappings": "AAiBA,IAAMA,EAAN,KAA2B,CAIzB,YAAYC,EAAqB,CAFjC,KAAQ,gBAAkB,GAGxB,KAAK,UAAY,SAAS,eAAeA,CAAW,EACpD,KAAK,cAAc,CACrB,CAEA,MAAc,eAAgB,CAExB,MAAM,KAAK,qBAAqB,EAClC,KAAK,cAAc,EAEnB,KAAK,kBAAkB,CAE3B,CAEA,MAAc,sBAAyC,CACrD,GAAI,CAEF,OADiB,MAAM,MAAM,iBAAiB,GACjC,SAAW,GAI1B,MAAgB,CACd,MAAO,EACT,CACF,CAEQ,eAAgB,CACtB,KAAK,UAAU,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA4B3B,SAAS,eAAe,YAAY,GAAG,iBAAiB,SAAW,GAAM,CACvE,EAAE,eAAe,EACjB,KAAK,YAAY,CACnB,CAAC,CACH,CAEA,MAAc,aAAc,CAC1B,IAAMC,EAAY,SAAS,eAAe,UAAU,EAAuB,MACrEC,EAAY,SAAS,eAAe,UAAU,EAAuB,MACrEC,EAAW,SAAS,eAAe,aAAa,EAEtD,GAAI,CACF,IAAMC,EAAW,MAAM,MAAM,iBAAkB,CAC7C,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CAAE,SAAAH,EAAU,SAAAC,CAAS,CAAC,CAC7C,CAAC,EAED,GAAIE,EAAS,GACX,KAAK,gBAAkB,GACvB,KAAK,kBAAkB,MAClB,CACL,IAAMC,EAAQ,MAAMD,EAAS,KAAK,EAClCD,EAAS,YAAcE,EAAM,SAAW,eACxCF,EAAS,MAAM,QAAU,OAC3B,CACF,MAAgB,CACdA,EAAS,YAAc,6BACvBA,EAAS,MAAM,QAAU,OAC3B,CACF,CAEQ,mBAAoB,CAC1B,KAAK,UAAU,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMjB,KAAK,gBAAkB,0DAA4D,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAW/F,KAAK,cAAc,EACnB,KAAK,iBAAiB,EAGlB,KAAK,iBACP,SAAS,eAAe,YAAY,GAAG,iBAAiB,QAAS,IAAM,CACrE,KAAK,OAAO,CACd,CAAC,CAEL,CAEA,MAAc,eAAgB,CAC5B,IAAMG,EAAY,SAAS,eAAe,qBAAqB,EAC/D,GAAKA,EAEL,GAAI,CACF,IAAMF,EAAW,MAAM,MAAM,iBAAiB,EAC9C,GAAI,CAACA,EAAS,GAAI,MAAM,IAAI,MAAM,uBAAuB,EAEzD,IAAMG,EAAuB,MAAMH,EAAS,KAAK,EACjD,KAAK,gBAAgBG,CAAK,CAC5B,OAASF,EAAO,CACdC,EAAU,UAAY;AAAA;AAAA;AAAA,+CAGmBD,CAAK;AAAA;AAAA,OAGhD,CACF,CAEQ,gBAAgBE,EAAsB,CAC5C,IAAMD,EAAY,SAAS,eAAe,qBAAqB,EAC1DA,IAELA,EAAU,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAYYC,EAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAQlBA,EAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAQhBA,EAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAQpBA,EAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAaA,KAAK,YAAYA,EAAM,oBAAoB,CAAC;AAAA,gBACzFA,EAAM,UAAY,oCAAoC,IAAI,KAAKA,EAAM,SAAS,EAAE,eAAe,CAAC,OAAS,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqBvH,SAAS,eAAe,QAAQ,GAAG,iBAAiB,QAAS,IAAM,CACjE,KAAK,qBAAqB,CAC5B,CAAC,EACH,CAEA,MAAc,sBAAuB,CACnC,IAAMC,EAAM,SAAS,eAAe,QAAQ,EACtCC,EAAeD,EAAI,UAEzB,GAAI,CACFA,EAAI,SAAW,GACfA,EAAI,UAAY,oEAEhB,IAAMJ,EAAW,MAAM,MAAM,uBAAwB,CACnD,OAAQ,MACV,CAAC,EAED,GAAI,CAACA,EAAS,GAAI,MAAM,IAAI,MAAM,2BAA2B,EAE7D,IAAMM,EAAkC,MAAMN,EAAS,KAAK,EAE5D,KAAK,UAAU;AAAA;AAAA,yBAEIM,EAAO,YAAY;AAAA,6BACfA,EAAO,gBAAgB;AAAA,uBAC7B,KAAK,YAAYA,EAAO,UAAU,CAAC;AAAA,QACjD,SAAS,EAGZ,KAAK,cAAc,CAErB,OAASL,EAAO,CACd,KAAK,UAAU,qCAAqCA,CAAK,GAAI,QAAQ,CACvE,QAAE,CACAG,EAAI,SAAW,GACfA,EAAI,UAAYC,CAClB,CACF,CAEA,MAAc,kBAAmB,CAC/B,IAAMH,EAAY,SAAS,eAAe,wBAAwB,EAClE,GAAKA,EAEL,GAAI,CACF,IAAMF,EAAW,MAAM,MAAM,cAAc,EAC3C,GAAI,CAACA,EAAS,GAAI,MAAM,IAAI,MAAM,6BAA6B,EAE/D,IAAMO,EAAO,MAAMP,EAAS,KAAK,EACjC,KAAK,mBAAmBO,EAAK,YAAY,CAC3C,OAASN,EAAO,CACdC,EAAU,UAAY;AAAA;AAAA;AAAA,4CAGgBD,CAAK;AAAA;AAAA,OAG7C,CACF,CAEA,MAAc,mBAAmBO,EAAwB,CACvD,IAAMN,EAAY,SAAS,eAAe,wBAAwB,EAClE,GAAI,CAACA,EAAW,OAEhB,GAAIM,EAAa,SAAW,EAAG,CAC7BN,EAAU,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUtB,MACF,CAGA,IAAMO,EAAiB,MAAM,QAAQ,IACnCD,EAAa,IAAI,MAAOE,GAAS,CAC/B,GAAI,CACF,IAAMV,EAAW,MAAM,MAAM,OAAOU,CAAI,YAAY,EACpD,GAAIV,EAAS,GAAI,CACf,IAAMO,EAAO,MAAMP,EAAS,KAAK,EACjC,MAAO,CAAE,KAAMU,EAAM,KAAMH,EAAK,MAAQ,CAAC,CAAE,CAC7C,CACF,OAASN,EAAO,CACd,QAAQ,KAAK,2BAA2BS,CAAI,IAAKT,CAAK,CACxD,CACA,MAAO,CAAE,KAAMS,EAAM,KAAM,CAAC,CAAE,CAChC,CAAC,CACH,EAEAR,EAAU,UAAY;AAAA;AAAA;AAAA,2CAGiBM,EAAa,MAAM;AAAA;AAAA;AAAA;AAAA,cAIhDC,EAAe,IAAIC,GAAQ;AAAA;AAAA;AAAA;AAAA,6CAIIA,EAAK,IAAI;AAAA;AAAA,yDAEGA,EAAK,KAAK,MAAM;AAAA;AAAA,sBAEnDA,EAAK,KAAK,OAAS,EAAI;AAAA;AAAA;AAAA,0BAGnBA,EAAK,KAAK,MAAM,EAAG,CAAC,EAAE,IAAIC,GAC1B,+CAA+CA,CAAG,SACpD,EAAE,KAAK,EAAE,CAAC;AAAA,0BACRD,EAAK,KAAK,OAAS,EAAI,6BAA6BA,EAAK,KAAK,OAAS,CAAC,eAAiB,EAAE;AAAA;AAAA,sBAE7F,EAAE;AAAA;AAAA;AAAA;AAAA,aAIb,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA,KAKrB,CAEQ,YAAYE,EAAuB,CACzC,GAAIA,IAAU,EAAG,MAAO,UACxB,IAAMC,EAAI,KACJC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,IAAI,EACxCC,EAAI,KAAK,MAAM,KAAK,IAAIH,CAAK,EAAI,KAAK,IAAIC,CAAC,CAAC,EAClD,OAAO,YAAYD,EAAQ,KAAK,IAAIC,EAAGE,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAI,IAAMD,EAAMC,CAAC,CACxE,CAEQ,UAAUC,EAAiBC,EAAc,CAC/C,IAAMC,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,UAAY,eAAeD,CAAI,+BACxCC,EAAS,UAAY;AAAA,QACjBF,CAAO;AAAA;AAAA,MAIX,IAAMd,EAAY,SAAS,eAAe,qBAAqB,EAC3DA,IACFA,EAAU,aAAagB,EAAUhB,EAAU,UAAU,EAGrD,WAAW,IAAM,CACXgB,EAAS,YACXA,EAAS,OAAO,CAEpB,EAAG,GAAI,EAEX,CAEQ,QAAS,CACf,KAAK,gBAAkB,GACvB,KAAK,cAAc,CACrB,CACF,EAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,IAAIvB,EAAqB,KAAK,CAChC,CAAC",
  "names": ["RegistryWebInterface", "containerId", "username", "password", "errorDiv", "response", "error", "container", "stats", "btn", "originalText", "result", "data", "repositories", "repositoryData", "repo", "tag", "bytes", "k", "sizes", "i", "message", "type", "alertDiv"]
}
